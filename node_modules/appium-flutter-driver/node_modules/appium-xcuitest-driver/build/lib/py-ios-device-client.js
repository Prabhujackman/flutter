"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Pyidevice = void 0;
require("source-map-support/register");
var _teen_process = require("teen_process");
var _support = require("appium/support");
var _logger = _interopRequireDefault(require("./logger"));
var _path = _interopRequireDefault(require("path"));
const BINARY_NAME = 'pyidevice';
class Pyidevice {
  constructor(udid) {
    this.udid = udid;
    this.binaryPath = null;
  }
  async assertExists(isStrict = true) {
    if (this.binaryPath) {
      return true;
    }
    try {
      this.binaryPath = await _support.fs.which(BINARY_NAME);
      return true;
    } catch (e) {
      if (isStrict) {
        throw new Error(`${BINARY_NAME} binary cannot be found in PATH. ` + `Please make sure it is installed. Visit https://github.com/YueChen-C/py-ios-device for ` + `more details.`);
      }
      return false;
    }
  }
  async execute(args, opts = {}) {
    await this.assertExists();
    const {
      cwd,
      format = 'json',
      logStdout = false,
      asynchronous = false
    } = opts;
    const finalArgs = [...args, '--udid', this.udid];
    if (format) {
      finalArgs.push('--format', format);
    }
    const cmdStr = _support.util.quote([this.binaryPath, ...finalArgs]);
    _logger.default.debug(`Executing ${cmdStr}`);
    try {
      if (asynchronous) {
        const result = new _teen_process.SubProcess(this.binaryPath, finalArgs, {
          cwd
        });
        await result.start(0);
        return result;
      }
      const result = await (0, _teen_process.exec)(this.binaryPath, finalArgs, {
        cwd
      });
      if (logStdout) {
        _logger.default.debug(`Command output: ${result.stdout}`);
      }
      return result;
    } catch (e) {
      throw new Error(`'${cmdStr}' failed. Original error: ${e.stderr || e.stdout || e.message}`);
    }
  }
  async listProfiles() {
    const {
      stdout
    } = await this.execute(['profiles', 'list']);
    return JSON.parse(stdout);
  }
  async installProfile({
    profilePath,
    payload
  } = {}) {
    if (!profilePath && !payload) {
      throw new Error('Either the full path to the profile or its payload must be provided');
    }
    let tmpRoot;
    let srcPath = profilePath;
    try {
      if (!srcPath) {
        tmpRoot = await _support.tempDir.openDir();
        srcPath = _path.default.join(tmpRoot, 'cert.pem');
        await _support.fs.writeFile(srcPath, payload, 'utf8');
      }
      await this.execute(['profiles', 'install', '--path', srcPath], {
        logStdout: true
      });
    } finally {
      if (tmpRoot) {
        await _support.fs.rimraf(tmpRoot);
      }
    }
  }
  async removeProfile(name) {
    await this.execute(['profiles', 'remove', '--name', name], {
      logStdout: true
    });
  }
  async listCrashes() {
    const {
      stdout
    } = await this.execute(['crash', 'list']);
    return JSON.parse(stdout.replace(/'/g, '"')).filter(x => !['.', '..'].includes(x));
  }
  async exportCrash(name, dstFolder) {
    await this.execute(['crash', 'export', '--name', name], {
      logStdout: true,
      cwd: dstFolder
    });
  }
  async collectPcap(dstFile) {
    return await this.execute(['pcapd', dstFile], {
      format: null,
      asynchronous: true
    });
  }
}
exports.Pyidevice = Pyidevice;
var _default = Pyidevice;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGVlbl9wcm9jZXNzIiwicmVxdWlyZSIsIl9zdXBwb3J0IiwiX2xvZ2dlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcGF0aCIsIkJJTkFSWV9OQU1FIiwiUHlpZGV2aWNlIiwiY29uc3RydWN0b3IiLCJ1ZGlkIiwiYmluYXJ5UGF0aCIsImFzc2VydEV4aXN0cyIsImlzU3RyaWN0IiwiZnMiLCJ3aGljaCIsImUiLCJFcnJvciIsImV4ZWN1dGUiLCJhcmdzIiwib3B0cyIsImN3ZCIsImZvcm1hdCIsImxvZ1N0ZG91dCIsImFzeW5jaHJvbm91cyIsImZpbmFsQXJncyIsInB1c2giLCJjbWRTdHIiLCJ1dGlsIiwicXVvdGUiLCJsb2ciLCJkZWJ1ZyIsInJlc3VsdCIsIlN1YlByb2Nlc3MiLCJzdGFydCIsImV4ZWMiLCJzdGRvdXQiLCJzdGRlcnIiLCJtZXNzYWdlIiwibGlzdFByb2ZpbGVzIiwiSlNPTiIsInBhcnNlIiwiaW5zdGFsbFByb2ZpbGUiLCJwcm9maWxlUGF0aCIsInBheWxvYWQiLCJ0bXBSb290Iiwic3JjUGF0aCIsInRlbXBEaXIiLCJvcGVuRGlyIiwicGF0aCIsImpvaW4iLCJ3cml0ZUZpbGUiLCJyaW1yYWYiLCJyZW1vdmVQcm9maWxlIiwibmFtZSIsImxpc3RDcmFzaGVzIiwicmVwbGFjZSIsImZpbHRlciIsIngiLCJpbmNsdWRlcyIsImV4cG9ydENyYXNoIiwiZHN0Rm9sZGVyIiwiY29sbGVjdFBjYXAiLCJkc3RGaWxlIiwiZXhwb3J0cyIsIl9kZWZhdWx0IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9weS1pb3MtZGV2aWNlLWNsaWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjLCBTdWJQcm9jZXNzIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IGZzLCB1dGlsLCB0ZW1wRGlyIH0gZnJvbSAnYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1l1ZUNoZW4tQy9weS1pb3MtZGV2aWNlXG5cbmNvbnN0IEJJTkFSWV9OQU1FID0gJ3B5aWRldmljZSc7XG5cbmNsYXNzIFB5aWRldmljZSB7XG4gIGNvbnN0cnVjdG9yICh1ZGlkKSB7XG4gICAgdGhpcy51ZGlkID0gdWRpZDtcbiAgICB0aGlzLmJpbmFyeVBhdGggPSBudWxsO1xuICB9XG5cbiAgYXN5bmMgYXNzZXJ0RXhpc3RzIChpc1N0cmljdCA9IHRydWUpIHtcbiAgICBpZiAodGhpcy5iaW5hcnlQYXRoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5iaW5hcnlQYXRoID0gYXdhaXQgZnMud2hpY2goQklOQVJZX05BTUUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtCSU5BUllfTkFNRX0gYmluYXJ5IGNhbm5vdCBiZSBmb3VuZCBpbiBQQVRILiBgICtcbiAgICAgICAgICBgUGxlYXNlIG1ha2Ugc3VyZSBpdCBpcyBpbnN0YWxsZWQuIFZpc2l0IGh0dHBzOi8vZ2l0aHViLmNvbS9ZdWVDaGVuLUMvcHktaW9zLWRldmljZSBmb3IgYCArXG4gICAgICAgICAgYG1vcmUgZGV0YWlscy5gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBleGVjdXRlIChhcmdzLCBvcHRzID0ge30pIHtcbiAgICBhd2FpdCB0aGlzLmFzc2VydEV4aXN0cygpO1xuICAgIGNvbnN0IHtcbiAgICAgIGN3ZCxcbiAgICAgIGZvcm1hdCA9ICdqc29uJyxcbiAgICAgIGxvZ1N0ZG91dCA9IGZhbHNlLFxuICAgICAgYXN5bmNocm9ub3VzID0gZmFsc2UsXG4gICAgfSA9IG9wdHM7XG5cbiAgICBjb25zdCBmaW5hbEFyZ3MgPSBbLi4uYXJncywgJy0tdWRpZCcsIHRoaXMudWRpZF07XG4gICAgaWYgKGZvcm1hdCkge1xuICAgICAgZmluYWxBcmdzLnB1c2goJy0tZm9ybWF0JywgZm9ybWF0KTtcbiAgICB9XG4gICAgY29uc3QgY21kU3RyID0gdXRpbC5xdW90ZShbdGhpcy5iaW5hcnlQYXRoLCAuLi5maW5hbEFyZ3NdKTtcbiAgICBsb2cuZGVidWcoYEV4ZWN1dGluZyAke2NtZFN0cn1gKTtcbiAgICB0cnkge1xuICAgICAgaWYgKGFzeW5jaHJvbm91cykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgU3ViUHJvY2Vzcyh0aGlzLmJpbmFyeVBhdGgsIGZpbmFsQXJncywge2N3ZH0pO1xuICAgICAgICBhd2FpdCByZXN1bHQuc3RhcnQoMCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleGVjKHRoaXMuYmluYXJ5UGF0aCwgZmluYWxBcmdzLCB7Y3dkfSk7XG4gICAgICBpZiAobG9nU3Rkb3V0KSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgQ29tbWFuZCBvdXRwdXQ6ICR7cmVzdWx0LnN0ZG91dH1gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHtjbWRTdHJ9JyBmYWlsZWQuIE9yaWdpbmFsIGVycm9yOiAke2Uuc3RkZXJyIHx8IGUuc3Rkb3V0IHx8IGUubWVzc2FnZX1gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBsaXN0UHJvZmlsZXMgKCkge1xuICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgdGhpcy5leGVjdXRlKFsncHJvZmlsZXMnLCAnbGlzdCddKTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdGRvdXQpO1xuICB9XG5cbiAgYXN5bmMgaW5zdGFsbFByb2ZpbGUgKHtwcm9maWxlUGF0aCwgcGF5bG9hZH0gPSB7fSkge1xuICAgIGlmICghcHJvZmlsZVBhdGggJiYgIXBheWxvYWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRWl0aGVyIHRoZSBmdWxsIHBhdGggdG8gdGhlIHByb2ZpbGUgb3IgaXRzIHBheWxvYWQgbXVzdCBiZSBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIGxldCB0bXBSb290O1xuICAgIGxldCBzcmNQYXRoID0gcHJvZmlsZVBhdGg7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghc3JjUGF0aCkge1xuICAgICAgICB0bXBSb290ID0gYXdhaXQgdGVtcERpci5vcGVuRGlyKCk7XG4gICAgICAgIHNyY1BhdGggPSBwYXRoLmpvaW4odG1wUm9vdCwgJ2NlcnQucGVtJyk7XG4gICAgICAgIGF3YWl0IGZzLndyaXRlRmlsZShzcmNQYXRoLCBwYXlsb2FkLCAndXRmOCcpO1xuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy5leGVjdXRlKFsncHJvZmlsZXMnLCAnaW5zdGFsbCcsICctLXBhdGgnLCBzcmNQYXRoXSwge1xuICAgICAgICBsb2dTdGRvdXQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAodG1wUm9vdCkge1xuICAgICAgICBhd2FpdCBmcy5yaW1yYWYodG1wUm9vdCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcmVtb3ZlUHJvZmlsZSAobmFtZSkge1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZShbJ3Byb2ZpbGVzJywgJ3JlbW92ZScsICctLW5hbWUnLCBuYW1lXSwge2xvZ1N0ZG91dDogdHJ1ZX0pO1xuICB9XG5cbiAgYXN5bmMgbGlzdENyYXNoZXMgKCkge1xuICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgdGhpcy5leGVjdXRlKFsnY3Jhc2gnLCAnbGlzdCddKTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdGRvdXQucmVwbGFjZSgvJy9nLCAnXCInKSkuZmlsdGVyKCh4KSA9PiAhWycuJywgJy4uJ10uaW5jbHVkZXMoeCkpO1xuICB9XG5cbiAgYXN5bmMgZXhwb3J0Q3Jhc2ggKG5hbWUsIGRzdEZvbGRlcikge1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZShbJ2NyYXNoJywgJ2V4cG9ydCcsICctLW5hbWUnLCBuYW1lXSwge1xuICAgICAgbG9nU3Rkb3V0OiB0cnVlLFxuICAgICAgLy8gVGhlIHRvb2wgZXhwb3J0cyBjcmFzaCByZXBvcnRzIHRvIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyXG4gICAgICBjd2Q6IGRzdEZvbGRlclxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgY29sbGVjdFBjYXAgKGRzdEZpbGUpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlKFsncGNhcGQnLCBkc3RGaWxlXSwge1xuICAgICAgZm9ybWF0OiBudWxsLFxuICAgICAgYXN5bmNocm9ub3VzOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUHlpZGV2aWNlIH07XG5leHBvcnQgZGVmYXVsdCBQeWlkZXZpY2U7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsYUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQUksS0FBQSxHQUFBRCxzQkFBQSxDQUFBSCxPQUFBO0FBSUEsTUFBTUssV0FBVyxHQUFHLFdBQVc7QUFFL0IsTUFBTUMsU0FBUyxDQUFDO0VBQ2RDLFdBQVdBLENBQUVDLElBQUksRUFBRTtJQUNqQixJQUFJLENBQUNBLElBQUksR0FBR0EsSUFBSTtJQUNoQixJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJO0VBQ3hCO0VBRUEsTUFBTUMsWUFBWUEsQ0FBRUMsUUFBUSxHQUFHLElBQUksRUFBRTtJQUNuQyxJQUFJLElBQUksQ0FBQ0YsVUFBVSxFQUFFO01BQ25CLE9BQU8sSUFBSTtJQUNiO0lBRUEsSUFBSTtNQUNGLElBQUksQ0FBQ0EsVUFBVSxHQUFHLE1BQU1HLFdBQUUsQ0FBQ0MsS0FBSyxDQUFDUixXQUFXLENBQUM7TUFDN0MsT0FBTyxJQUFJO0lBQ2IsQ0FBQyxDQUFDLE9BQU9TLENBQUMsRUFBRTtNQUNWLElBQUlILFFBQVEsRUFBRTtRQUNaLE1BQU0sSUFBSUksS0FBSyxDQUFFLEdBQUVWLFdBQVksbUNBQWtDLEdBQzlELHlGQUF3RixHQUN4RixlQUFjLENBQUM7TUFDcEI7TUFDQSxPQUFPLEtBQUs7SUFDZDtFQUNGO0VBRUEsTUFBTVcsT0FBT0EsQ0FBRUMsSUFBSSxFQUFFQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDOUIsTUFBTSxJQUFJLENBQUNSLFlBQVksRUFBRTtJQUN6QixNQUFNO01BQ0pTLEdBQUc7TUFDSEMsTUFBTSxHQUFHLE1BQU07TUFDZkMsU0FBUyxHQUFHLEtBQUs7TUFDakJDLFlBQVksR0FBRztJQUNqQixDQUFDLEdBQUdKLElBQUk7SUFFUixNQUFNSyxTQUFTLEdBQUcsQ0FBQyxHQUFHTixJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQ1QsSUFBSSxDQUFDO0lBQ2hELElBQUlZLE1BQU0sRUFBRTtNQUNWRyxTQUFTLENBQUNDLElBQUksQ0FBQyxVQUFVLEVBQUVKLE1BQU0sQ0FBQztJQUNwQztJQUNBLE1BQU1LLE1BQU0sR0FBR0MsYUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUNsQixVQUFVLEVBQUUsR0FBR2MsU0FBUyxDQUFDLENBQUM7SUFDMURLLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLGFBQVlKLE1BQU8sRUFBQyxDQUFDO0lBQ2hDLElBQUk7TUFDRixJQUFJSCxZQUFZLEVBQUU7UUFDaEIsTUFBTVEsTUFBTSxHQUFHLElBQUlDLHdCQUFVLENBQUMsSUFBSSxDQUFDdEIsVUFBVSxFQUFFYyxTQUFTLEVBQUU7VUFBQ0o7UUFBRyxDQUFDLENBQUM7UUFDaEUsTUFBTVcsTUFBTSxDQUFDRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLE9BQU9GLE1BQU07TUFDZjtNQUNBLE1BQU1BLE1BQU0sR0FBRyxNQUFNLElBQUFHLGtCQUFJLEVBQUMsSUFBSSxDQUFDeEIsVUFBVSxFQUFFYyxTQUFTLEVBQUU7UUFBQ0o7TUFBRyxDQUFDLENBQUM7TUFDNUQsSUFBSUUsU0FBUyxFQUFFO1FBQ2JPLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLG1CQUFrQkMsTUFBTSxDQUFDSSxNQUFPLEVBQUMsQ0FBQztNQUMvQztNQUNBLE9BQU9KLE1BQU07SUFDZixDQUFDLENBQUMsT0FBT2hCLENBQUMsRUFBRTtNQUNWLE1BQU0sSUFBSUMsS0FBSyxDQUFFLElBQUdVLE1BQU8sNkJBQTRCWCxDQUFDLENBQUNxQixNQUFNLElBQUlyQixDQUFDLENBQUNvQixNQUFNLElBQUlwQixDQUFDLENBQUNzQixPQUFRLEVBQUMsQ0FBQztJQUM3RjtFQUNGO0VBRUEsTUFBTUMsWUFBWUEsQ0FBQSxFQUFJO0lBQ3BCLE1BQU07TUFBQ0g7SUFBTSxDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUNsQixPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDekQsT0FBT3NCLElBQUksQ0FBQ0MsS0FBSyxDQUFDTCxNQUFNLENBQUM7RUFDM0I7RUFFQSxNQUFNTSxjQUFjQSxDQUFFO0lBQUNDLFdBQVc7SUFBRUM7RUFBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDakQsSUFBSSxDQUFDRCxXQUFXLElBQUksQ0FBQ0MsT0FBTyxFQUFFO01BQzVCLE1BQU0sSUFBSTNCLEtBQUssQ0FBQyxxRUFBcUUsQ0FBQztJQUN4RjtJQUVBLElBQUk0QixPQUFPO0lBQ1gsSUFBSUMsT0FBTyxHQUFHSCxXQUFXO0lBQ3pCLElBQUk7TUFDRixJQUFJLENBQUNHLE9BQU8sRUFBRTtRQUNaRCxPQUFPLEdBQUcsTUFBTUUsZ0JBQU8sQ0FBQ0MsT0FBTyxFQUFFO1FBQ2pDRixPQUFPLEdBQUdHLGFBQUksQ0FBQ0MsSUFBSSxDQUFDTCxPQUFPLEVBQUUsVUFBVSxDQUFDO1FBQ3hDLE1BQU0vQixXQUFFLENBQUNxQyxTQUFTLENBQUNMLE9BQU8sRUFBRUYsT0FBTyxFQUFFLE1BQU0sQ0FBQztNQUM5QztNQUNBLE1BQU0sSUFBSSxDQUFDMUIsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUU0QixPQUFPLENBQUMsRUFBRTtRQUM3RHZCLFNBQVMsRUFBRTtNQUNiLENBQUMsQ0FBQztJQUNKLENBQUMsU0FBUztNQUNSLElBQUlzQixPQUFPLEVBQUU7UUFDWCxNQUFNL0IsV0FBRSxDQUFDc0MsTUFBTSxDQUFDUCxPQUFPLENBQUM7TUFDMUI7SUFDRjtFQUNGO0VBRUEsTUFBTVEsYUFBYUEsQ0FBRUMsSUFBSSxFQUFFO0lBQ3pCLE1BQU0sSUFBSSxDQUFDcEMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUVvQyxJQUFJLENBQUMsRUFBRTtNQUFDL0IsU0FBUyxFQUFFO0lBQUksQ0FBQyxDQUFDO0VBQy9FO0VBRUEsTUFBTWdDLFdBQVdBLENBQUEsRUFBSTtJQUNuQixNQUFNO01BQUNuQjtJQUFNLENBQUMsR0FBRyxNQUFNLElBQUksQ0FBQ2xCLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN0RCxPQUFPc0IsSUFBSSxDQUFDQyxLQUFLLENBQUNMLE1BQU0sQ0FBQ29CLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFFQyxDQUFDLElBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQ0MsUUFBUSxDQUFDRCxDQUFDLENBQUMsQ0FBQztFQUN0RjtFQUVBLE1BQU1FLFdBQVdBLENBQUVOLElBQUksRUFBRU8sU0FBUyxFQUFFO0lBQ2xDLE1BQU0sSUFBSSxDQUFDM0MsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUVvQyxJQUFJLENBQUMsRUFBRTtNQUN0RC9CLFNBQVMsRUFBRSxJQUFJO01BRWZGLEdBQUcsRUFBRXdDO0lBQ1AsQ0FBQyxDQUFDO0VBQ0o7RUFFQSxNQUFNQyxXQUFXQSxDQUFFQyxPQUFPLEVBQUU7SUFDMUIsT0FBTyxNQUFNLElBQUksQ0FBQzdDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRTZDLE9BQU8sQ0FBQyxFQUFFO01BQzVDekMsTUFBTSxFQUFFLElBQUk7TUFDWkUsWUFBWSxFQUFFO0lBQ2hCLENBQUMsQ0FBQztFQUNKO0FBQ0Y7QUFBQ3dDLE9BQUEsQ0FBQXhELFNBQUEsR0FBQUEsU0FBQTtBQUFBLElBQUF5RCxRQUFBLEdBR2N6RCxTQUFTO0FBQUF3RCxPQUFBLENBQUFFLE9BQUEsR0FBQUQsUUFBQSJ9